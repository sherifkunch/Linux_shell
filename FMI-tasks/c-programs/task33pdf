//task 33 pdf
//
//algorithm
/*
 f1 - input file // uint32_t 
 f2 - output file - (sorted)
 
 filesize(f1) % sizeof(uint32_t) == 0

 100 000 000 * uin32_t ~ 380MB
 50 000 000 * uint32_t ~190 < limit 256MB

 numel = filesize(f1) / sizeof(uint32_t) shte ni kaje kolko chisla imame v tozi file 

 read numel/2 elements from f1 in RAM
 qsort 
 dump in t1 
 
 read rest from f1 in RAM 
 qsort 
 dump in t2 
 
 close(f1)

 masivi a, b -> c 
 	n  m

 merge sort

 i = 0;
 j = 0;
 k = 0;
 while(i<n && j<m){
 	if(a[i] <= b[j]{
		c[k++]=a[i++];
	}else{
		c[k++] = b[j];
	}
 }

 while(i<n) {
 	c[k++] = a[i++]
 }
  
 */
#include <stdlib.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>
#include <err.h>
#include <fcntl.h>
#include <stdint.h>
#include <stdio.h>
#include <errno.h>
#include <stdlib.h>

int cmp(const void *a, const void *b){
	if( *((uint32_t*)a) > *((uint32_t*)b)){
		return 1;
	}else if( *((uint32_t*)a) < *((uint32_t*)b)){
		return -1;
	}
	return 0;
}
int main(){
	struct stat st; 
	if(stat("f1",&st) < 0 ){
		err(2,"unable to stat");
	}

	printf("%ld\n",st.st_size);
	if(st.st_size % sizeof(uint32_t) != 0){
		errx(3,"wrong count");
	}
	uint32_t numel = st.st_size / sizeof(uint32_t);//hom many numbers 
	printf("%d\n",numel);

	uint32_t half = numel/2;
	uint32_t *p = malloc(half*sizeof(uint32_t)); 
	if(!p){
		err(10,"failed malloc");
	}	

	int fd1;
	if((fd1 = open("f1",O_RDONLY)) == -1 ){
		free(p);
		err(1,"error opening f1");
	}
	
	int t1;
	if((t1 = open("temp1",O_CREAT | O_RDWR | O_TRUNC, S_IRUSR| S_IWUSR )) == -1){
		const int olderrno = errno;
		free(p);
		close(fd1);
		errno= olderrno;
		err(4,"Failed to open temp1");
	}
	printf("%ld",sizeof(p));
	size_t res = read(fd1,p,half*sizeof(uint32_t));
	if(res != half*sizeof(uint32_t)){
		const int olderrno = errno;
		free(p);
		close(fd1);
		close(t1);
		errno= olderrno;
		err(6,"Failed to read f1");
	}
	
	qsort(p,half,sizeof(uint32_t),cmp);
	res = write(t1,p,half*sizeof(uint32_t));

	if(res != half*sizeof(uint32_t)){
		const int olderrno = errno;
		free(p);
		close(fd1);
		close(t1);
		errno= olderrno;
		err(7,"Failed to write t1");
	}
	
	
	uint32_t rhalf = numel-half;
	uint32_t *rp = malloc(rhalf*sizeof(uint32_t));

	if(!rp){
		const int olderrno = errno;
		close(fd1);
		errno=olderrno;
		err(8,"failed malloc in rp");
	}
	
	int t2;
	if((t2 = open("temp2",O_CREAT | O_RDWR | O_TRUNC, S_IRUSR | S_IWUSR)) == -1)
	{
		const int olderrno = errno;
		free(rp);
		close(fd1);
		errno= olderrno;
		err(9,"Failed to open temp2");
	}
	res = read(fd1,rp,rhalf*sizeof(uint32_t));
	if(res != rhalf*sizeof(uint32_t)){
		const int olderrno = errno;
                free(rp);
                close(fd1);
		close(t2);
                errno= olderrno;
                err(10,"Failed to read f1");
	}
	
	qsort(rp,rhalf,sizeof(uint32_t),cmp);
	res=write(t2,rp,rhalf*sizeof(uint32_t));		
	if(res != rhalf*sizeof(uint32_t)){
		const int olderrno = errno;
                close(t2);
		close(fd1);
		free(rp);
                errno= olderrno;
                err(11,"Failed to read f1");
	}
	
	free(rp);
	close(fd1);
	
	lseek(t1,0,SEEK_SET);
	lseek(t2,0,SEEK_SET);

	int fd2 = open("f2",O_CREAT | O_RDWR | O_TRUNC, S_IRUSR | S_IWUSR);
	if(fd2<0){
		const int olderrno = errno;
                close(t2);
                close(t1);
                errno= olderrno;
                err(12,"Failed to open f2");
	}
	uint32_t a;
	uint32_t b;

	while((read(t1,&a,sizeof(a)) == sizeof(a)) && (read(t2,&b,sizeof(b))== sizeof(b))){
		if(a<=b){
			write(fd2,&a,sizeof(a));
			lseek(t2,-1*sizeof(b),SEEK_CUR);
		}else{
			write(fd2,&b, sizeof(b));
			lseek(t1,-1*sizeof(a),SEEK_CUR);
		}
	}


	while(read(t1,&a,sizeof(a)) == sizeof(a)){
		write(fd2,&a,sizeof(a));
	}
	while(read(t1,&b,sizeof(b)) == sizeof(b)){
		write(fd2,&b,sizeof(b));
	}

	close(t1);
	close(t2);
	close(fd2);
	exit(0);  
}
